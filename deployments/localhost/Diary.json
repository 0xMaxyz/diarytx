{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "diarySavingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diaryCoverFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ownerProfileUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Diary__InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__NotAllowedToFollowYourself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__NotEnoughFollowerToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__ProfileAlreadyFollowedByYou",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__ProfileNotFollowedByYou",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__ProfileNotOwnedByAnyone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Diary__ProfileNotOwnedByYou",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "diaryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "DiaryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "followerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "followeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "followedProfileId",
          "type": "uint256"
        }
      ],
      "name": "ProfileFollowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "profileOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "ProfileMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "followerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "followeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "followedProfileId",
          "type": "uint256"
        }
      ],
      "name": "ProfileUnfollowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "diaryUri",
          "type": "string"
        },
        {
          "internalType": "enum Enums.DiaryVisibility",
          "name": "diaryVisibility",
          "type": "uint8"
        }
      ],
      "name": "CreateDiary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DiaryCoverFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DiarySavingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diaryOwner",
          "type": "address"
        }
      ],
      "name": "MoreThanOneDiaryPerDay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "moreThanOne",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyFollowerTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "followerProfileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "followeeProfileId",
          "type": "uint256"
        }
      ],
      "name": "followProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "followerTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setFollowerTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        }
      ],
      "name": "unfollowProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4279160",
    "logsBloom": "0x
    "blockHash": "0xb4dcfdce8928d926f22f7ec90845f80a26595aec5c47e485ae4cf00e79e2b455",
    "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4dcfdce8928d926f22f7ec90845f80a26595aec5c47e485ae4cf00e79e2b455"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 1,
        "blockHash": "0xb4dcfdce8928d926f22f7ec90845f80a26595aec5c47e485ae4cf00e79e2b455"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x7954521ac80e6cc6d94a1ab53042fb171cc4e44844bfb2f95796701c1841ef940000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0xb4dcfdce8928d926f22f7ec90845f80a26595aec5c47e485ae4cf00e79e2b455"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x36ca970b78a146e9a3f6dad3f580f76260a4b2b7b16587c18dcb8a064f9ac916",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x7f12dfaa89897e8576e1df3d22fd9d33745a418b2882ad551860bbc4111599ec",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x7954521ac80e6cc6d94a1ab53042fb171cc4e44844bfb2f95796701c1841ef94",
          "0x25684e062a6f764039bd00c6701d92fdf734a7b6c479b78f5a52205beaa9f713"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb4dcfdce8928d926f22f7ec90845f80a26595aec5c47e485ae4cf00e79e2b455"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "4279160",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "100000000000000000",
    "http://url/"
  ],
  "numDeployments": 1,
  "solcInputHash": "ecf7d0bcef60087453ba69fbd711bd86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"diarySavingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diaryCoverFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ownerProfileUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Diary__InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__NotAllowedToFollowYourself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__NotEnoughFollowerToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__ProfileAlreadyFollowedByYou\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__ProfileNotFollowedByYou\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__ProfileNotOwnedByAnyone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Diary__ProfileNotOwnedByYou\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"diaryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"DiaryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"followerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"followeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"followedProfileId\",\"type\":\"uint256\"}],\"name\":\"ProfileFollowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"profileOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"ProfileMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"followerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"followeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"followedProfileId\",\"type\":\"uint256\"}],\"name\":\"ProfileUnfollowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"diaryUri\",\"type\":\"string\"},{\"internalType\":\"enum Enums.DiaryVisibility\",\"name\":\"diaryVisibility\",\"type\":\"uint8\"}],\"name\":\"CreateDiary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DiaryCoverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DiarySavingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diaryOwner\",\"type\":\"address\"}],\"name\":\"MoreThanOneDiaryPerDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"moreThanOne\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyFollowerTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"followerProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followeeProfileId\",\"type\":\"uint256\"}],\"name\":\"followProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"followerTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setFollowerTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"unfollowProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Diary.sol\":\"Diary\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xdfab949ba677f4b122d0c14225e6db7ca8a65524e2f00049e57b04f68eceeb87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 id => uint256) private _totalSupply;\\n    uint256 private _totalSupplyAll;\\n\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                _totalSupply[ids[i]] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            _totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    _totalSupply[ids[i]] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                _totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cebc792116430641b9ec887f245ce5dde0ace17a8d5fc38e03fd087e061b537\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/src/Diary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./libraries/Date.sol\\\";\\r\\nimport \\\"./libraries/Errors.sol\\\";\\r\\nimport \\\"./libraries/Structs.sol\\\";\\r\\nimport \\\"./libraries/Events.sol\\\";\\r\\nimport \\\"./libraries/Enums.sol\\\";\\r\\n\\r\\ncontract Diary is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply, ReentrancyGuard {\\r\\n    using Date for uint256;\\r\\n\\r\\n    uint256 nonce;\\r\\n    uint256 public DiarySavingFee;\\r\\n    uint256 public DiaryCoverFee;\\r\\n\\r\\n    // Track last save date\\r\\n    mapping(address => uint256) LastSaveDate;\\r\\n\\r\\n    // Follower token\\r\\n    uint8 constant FOLLOWER_TOKEN_ID = 1;\\r\\n    uint256 public followerTokenPrice = 1 ether; // per FOLLOWER_PRICE_PER_QUANTITY follower tokens\\r\\n    uint256 private constant FOLLOWER_PRICE_PER_QUANTITY = 100;\\r\\n    uint256 public discountRate = 10;\\r\\n    mapping(address profileOwner => mapping(uint256 followedProfileId => bool isFollowed)) IsFollowing;\\r\\n    mapping(uint256 => address[]) private profileFollowers;\\r\\n    mapping(uint256 => mapping(address => uint256)) private profileFollowerIndexes;\\r\\n\\r\\n    // Diary\\r\\n    mapping(uint256 => address) DiaryOwners;\\r\\n    mapping(uint256 diaryTokenId => Enums.DiaryVisibility visibility) DiaryVisibility;\\r\\n\\r\\n    // Profiles\\r\\n    mapping(address profileOwner => mapping(uint256 profileTokenID => bool isOwned)) ProfileTokens;\\r\\n    mapping(uint256 profileTokenId => address ownerAddress) ProfileOwnedBy;\\r\\n    mapping(address profileOwner => bool hasProfile) HasProfile;\\r\\n    mapping(uint256 profileTokenId => mapping(uint256 diaryTokenId => bool ownedByProfile)) ProfileDiaries;\\r\\n\\r\\n    // Token URIs\\r\\n    mapping(uint256 tokenId => string tokenMetadataUri) TokenUri;\\r\\n\\r\\n    constructor(\\r\\n        uint256 diarySavingFee,\\r\\n        uint256 diaryCoverFee,\\r\\n        string memory ownerProfileUri\\r\\n    ) ERC1155(\\\"\\\") Ownable(msg.sender) {\\r\\n        DiarySavingFee = diarySavingFee;\\r\\n        DiaryCoverFee = diaryCoverFee;\\r\\n\\r\\n        // Mint 1000 follower token for contract owner\\r\\n        _mint(msg.sender, FOLLOWER_TOKEN_ID, 1000, \\\"\\\");\\r\\n\\r\\n        // Mint a profile for contract owner\\r\\n        mintProfile(ownerProfileUri);\\r\\n    }\\r\\n\\r\\n    function _getUniqueId(Enums.TokenType tokenType) private view returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(msg.sender, blockhash(block.number - 1), tokenType, nonce)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _incrementNounce() private {\\r\\n        unchecked {\\r\\n            ++nonce;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUniqueIdAndIncrementNonce(Enums.TokenType tokenType) private returns (uint256 id) {\\r\\n        id = _getUniqueId(tokenType);\\r\\n        _incrementNounce();\\r\\n    }\\r\\n\\r\\n    function CreateDiary(\\r\\n        uint256 profileId,\\r\\n        string calldata diaryUri,\\r\\n        Enums.DiaryVisibility diaryVisibility\\r\\n    ) public payable {\\r\\n        // Check if profile is owned by caller\\r\\n        if (!ProfileTokens[msg.sender][profileId]) {\\r\\n            revert Errors.Diary__ProfileNotOwnedByYou();\\r\\n        }\\r\\n        // Check if the requested address has registered diaries for current date\\r\\n        if (!MoreThanOneDiaryPerDay(msg.sender)) {\\r\\n            // Create the diary\\r\\n            _createDiary(profileId, diaryUri, diaryVisibility);\\r\\n        } else {\\r\\n            if (msg.value < DiarySavingFee) {\\r\\n                revert Errors.Diary__InsufficientFee();\\r\\n            }\\r\\n\\r\\n            // create the diary\\r\\n            _createDiary(profileId, diaryUri, diaryVisibility);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintProfile(string memory profileUri) private {\\r\\n        // get unique id\\r\\n        uint256 profileTokenId = getUniqueIdAndIncrementNonce(Enums.TokenType.ProfileToken);\\r\\n\\r\\n        // Mint profile token\\r\\n        mint(msg.sender, profileTokenId, 1, \\\"\\\");\\r\\n\\r\\n        // Add token uri\\r\\n        TokenUri[profileTokenId] = profileUri;\\r\\n\\r\\n        // Add to Profiles\\r\\n        ProfileTokens[msg.sender][profileTokenId] = true;\\r\\n\\r\\n        // set HasProfile to true\\r\\n        HasProfile[msg.sender] = true;\\r\\n\\r\\n        // set profileTokenId as owned\\r\\n        ProfileOwnedBy[profileTokenId] = msg.sender;\\r\\n\\r\\n        // emit Profile token mint\\r\\n        emit Events.ProfileMint(msg.sender, profileTokenId, profileUri);\\r\\n    }\\r\\n\\r\\n    function _createDiary(\\r\\n        uint256 profileId,\\r\\n        string calldata diaryUri,\\r\\n        Enums.DiaryVisibility diaryVisibility\\r\\n    ) private {\\r\\n        // get unique id for the diary\\r\\n        uint256 diaryId = getUniqueIdAndIncrementNonce(Enums.TokenType.DiaryToken);\\r\\n\\r\\n        // Mint the new diary for msg.sender\\r\\n        mint(msg.sender, diaryId, 1, \\\"\\\");\\r\\n\\r\\n        // set visibbility of diary in its mapping\\r\\n        DiaryVisibility[diaryId] = diaryVisibility;\\r\\n        // set the msg.sender as the owner of this diary in its mapping\\r\\n        DiaryOwners[diaryId] = msg.sender;\\r\\n        // add this diary to requested profile which is owned by msg.sender\\r\\n        ProfileDiaries[profileId][diaryId] = true;\\r\\n\\r\\n        TokenUri[diaryId] = diaryUri;\\r\\n\\r\\n        // emit the diary created event\\r\\n        emit Events.DiaryCreated(profileId, diaryId, diaryUri);\\r\\n\\r\\n        // Update last save date\\r\\n        LastSaveDate[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function MoreThanOneDiaryPerDay(address diaryOwner) public view returns (bool moreThanOne) {\\r\\n        uint256 lastSaveDate = LastSaveDate[diaryOwner];\\r\\n        if (lastSaveDate == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // get last date (d,m,y)\\r\\n        (uint256 lastSaveDay, uint256 lastSaveMonth, uint256 lastSaveYear) = lastSaveDate.GetDate();\\r\\n\\r\\n        // Get current date from block timestamp\\r\\n        (uint256 currentDay, uint256 currentMonth, uint256 currentYear) = block.timestamp.GetDate();\\r\\n\\r\\n        // If these two dates are different, return 0\\r\\n        if (\\r\\n            lastSaveDay != currentDay ||\\r\\n            lastSaveMonth != currentMonth ||\\r\\n            lastSaveYear != currentYear\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        // if these two dates are the same, then return 1\\r\\n        if (\\r\\n            lastSaveDay == currentDay &&\\r\\n            lastSaveMonth == currentMonth &&\\r\\n            lastSaveYear == currentYear\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setURI(string memory newuri) public onlyOwner {\\r\\n        _setURI(newuri);\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) private {\\r\\n        _mint(account, id, amount, data);\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        _mintBatch(to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function _update(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) internal override(ERC1155, ERC1155Supply) {\\r\\n        super._update(from, to, ids, values);\\r\\n    }\\r\\n\\r\\n    // Follower Token\\r\\n    function buyFollowerTokens(uint256 quantity) external payable nonReentrant {\\r\\n        uint256 totalPrice = (followerTokenPrice * quantity) / FOLLOWER_PRICE_PER_QUANTITY;\\r\\n        if (quantity >= FOLLOWER_PRICE_PER_QUANTITY * 10) {\\r\\n            totalPrice = totalPrice - ((totalPrice * discountRate) / 100);\\r\\n        }\\r\\n        if (msg.value < totalPrice) {\\r\\n            revert Errors.Diary__InsufficientFee();\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, FOLLOWER_TOKEN_ID, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setFollowerTokenPrice(uint256 newPrice) external onlyOwner {\\r\\n        followerTokenPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    // Function to follow a profile\\r\\n    function followProfile(uint256 followerProfileId, uint256 followeeProfileId) external {\\r\\n        if (!ProfileTokens[msg.sender][followerProfileId]) {\\r\\n            revert Errors.Diary__ProfileNotOwnedByYou();\\r\\n        }\\r\\n        if (\\r\\n            ProfileTokens[msg.sender][followerProfileId] ==\\r\\n            ProfileTokens[msg.sender][followeeProfileId]\\r\\n        ) {\\r\\n            revert Errors.Diary__NotAllowedToFollowYourself();\\r\\n        }\\r\\n\\r\\n        if (ProfileOwnedBy[followeeProfileId] == address(0)) {\\r\\n            revert Errors.Diary__ProfileNotOwnedByAnyone();\\r\\n        }\\r\\n        if (balanceOf(msg.sender, FOLLOWER_TOKEN_ID) < 1) {\\r\\n            revert Errors.Diary__NotEnoughFollowerToken();\\r\\n        }\\r\\n\\r\\n        if (IsFollowing[msg.sender][followeeProfileId]) {\\r\\n            revert Errors.Diary__ProfileAlreadyFollowedByYou();\\r\\n        }\\r\\n\\r\\n        // Transfer one Follower Token from the follower to the contract as a 'staking' concept\\r\\n        _safeTransferFrom(msg.sender, address(this), FOLLOWER_TOKEN_ID, 1, \\\"\\\");\\r\\n\\r\\n        // Record that the user is now following the profileId\\r\\n        IsFollowing[msg.sender][followeeProfileId] = true;\\r\\n        profileFollowers[followeeProfileId].push(msg.sender);\\r\\n\\r\\n        profileFollowerIndexes[followeeProfileId][msg.sender] =\\r\\n            profileFollowers[followeeProfileId].length -\\r\\n            1;\\r\\n\\r\\n        emit Events.ProfileFollowed(\\r\\n            msg.sender,\\r\\n            ProfileOwnedBy[followeeProfileId],\\r\\n            followeeProfileId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Function to unfollow a profile\\r\\n    function unfollowProfile(uint256 profileId) external {\\r\\n        if (!IsFollowing[msg.sender][profileId]) {\\r\\n            revert Errors.Diary__ProfileNotFollowedByYou();\\r\\n        }\\r\\n\\r\\n        // Transfer the Follower Token back to the unfollower\\r\\n        _safeTransferFrom(address(this), msg.sender, FOLLOWER_TOKEN_ID, 1, \\\"\\\");\\r\\n\\r\\n        // Record that the user has unfollowed the profile\\r\\n        IsFollowing[msg.sender][profileId] = false;\\r\\n\\r\\n        // Remove follower from the profileFollowers list in an efficient way\\r\\n        uint256 followerIndex = profileFollowerIndexes[profileId][msg.sender];\\r\\n        address lastFollower = profileFollowers[profileId][profileFollowers[profileId].length - 1];\\r\\n\\r\\n        // Move the last element to the slot of the to-be-removed element\\r\\n        profileFollowers[profileId][followerIndex] = lastFollower;\\r\\n        // Update the index mapping for the last follower\\r\\n        profileFollowerIndexes[profileId][lastFollower] = followerIndex;\\r\\n        // Remove the last element\\r\\n        profileFollowers[profileId].pop();\\r\\n\\r\\n        // Clean up our index mapping\\r\\n        delete profileFollowerIndexes[profileId][msg.sender];\\r\\n\\r\\n        emit Events.ProfileUnfollowed(msg.sender, ProfileOwnedBy[profileId], profileId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2ff9ac35ead44506556315803a03d9b1a3426d5bb7f120f2eb6715b2405c8aa\",\"license\":\"MIT\"},\"contracts/src/libraries/Date.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary Date {\\r\\n    /// @dev The visibility of this function shall be changed to external for the test to run successfully\\r\\n    function GetDate(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint day, uint month, uint year) {\\r\\n        unchecked {\\r\\n            int __days = int(timestamp / 86400);\\r\\n\\r\\n            int L = __days + 2509157;\\r\\n            int N = (4 * L) / 146097;\\r\\n            L = L - (146097 * N + 3) / 4;\\r\\n            int _year = (4000 * (L + 1)) / 1461001;\\r\\n            L = L - (1461 * _year) / 4 + 31;\\r\\n            int _month = (80 * L) / 2447;\\r\\n            int _day = L - (2447 * _month) / 80;\\r\\n            L = _month / 11;\\r\\n            _month = _month + 2 - 12 * L;\\r\\n            _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n            year = uint(_year);\\r\\n            month = uint(_month);\\r\\n            day = uint(_day);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f2162646407b397be8e2e2225a3640434e3e43c0bbee0e9c49143f2b7f046c3\",\"license\":\"MIT\"},\"contracts/src/libraries/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary Enums {\\r\\n    enum DiaryVisibility {\\r\\n        Private,\\r\\n        Public\\r\\n    }\\r\\n\\r\\n    enum ProfieVisibility {\\r\\n        Private,\\r\\n        Public\\r\\n    }\\r\\n\\r\\n    enum TokenType {\\r\\n        ProfileToken,\\r\\n        FollowerToken,\\r\\n        DiaryToken\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6dcd528368f08e308791d2cb0499e7b32ef634a5239e082755ab5e177402c80e\",\"license\":\"MIT\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary Errors {\\r\\n    error Diary__NotAuthorized();\\r\\n    error Diary__NotOwnedByYou();\\r\\n    error Diary__InsufficientFee();\\r\\n    error Diary__CoverFeeInsufficient();\\r\\n    error Diary__SharedSlotsAreFull();\\r\\n    error Diary__NotSharedWithInput();\\r\\n    error Diary__PublicKeyAlreadySaved();\\r\\n    error Diary__ProfileExists(uint256);\\r\\n    error Diary__ProfileNotOwnedByYou();\\r\\n    error Diary__NotEnoughFollowerToken();\\r\\n    error Diary__NotAllowedToFollowYourself();\\r\\n    error Diary__ProfileNotOwnedByAnyone();\\r\\n    error Diary__ProfileAlreadyFollowedByYou();\\r\\n    error Diary__ProfileNotFollowedByYou();\\r\\n}\\r\\n\",\"keccak256\":\"0xb34e2353713090a70b168bbac3db5eece87f1b4b23a51b9c0a875bcbd0c71522\",\"license\":\"MIT\"},\"contracts/src/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport {Structs} from \\\"./Structs.sol\\\";\\r\\n\\r\\nlibrary Events {\\r\\n    event DiaryCreated(\\r\\n        uint256 indexed profileTokenId,\\r\\n        uint256 indexed diaryId,\\r\\n        string indexed tokenUri\\r\\n    );\\r\\n\\r\\n    event DiaryShared(\\r\\n        uint256 indexed diaryId,\\r\\n        address indexed diaryOwner,\\r\\n        address indexed sharedwith,\\r\\n        string metadata\\r\\n    );\\r\\n\\r\\n    event DiarySharingRevoked(\\r\\n        uint256 indexed diaryId,\\r\\n        address indexed diaryOwner,\\r\\n        address indexed sharedwith\\r\\n    );\\r\\n\\r\\n    event SavingFeeChanged(uint256 indexed newFee);\\r\\n\\r\\n    event PublicKeySaved(address addr);\\r\\n\\r\\n    // Profile Events\\r\\n    event ProfileMint(\\r\\n        address indexed profileOwner,\\r\\n        uint256 indexed tokenId,\\r\\n        string indexed tokenUri\\r\\n    );\\r\\n\\r\\n    event ProfileFollowed(\\r\\n        address indexed followerAddress,\\r\\n        address indexed followeeAddress,\\r\\n        uint256 indexed followedProfileId\\r\\n    );\\r\\n\\r\\n    event ProfileUnfollowed(\\r\\n        address indexed followerAddress,\\r\\n        address indexed followeeAddress,\\r\\n        uint256 indexed followedProfileId\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xd97c6f0a27f7cb410258fd88316a1950d3b1e35190db493db0a4327b866ac91e\",\"license\":\"MIT\"},\"contracts/src/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"./Enums.sol\\\";\\r\\n\\r\\nlibrary Structs {}\\r\\n\",\"keccak256\":\"0x8f997228359167e68071a39c6302288325bc198f57e084041241f6a2b742b11b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a7640000600b55600a600c553480156200002257600080fd5b506040516200600e3803806200600e833981810160405281019062000048919062001184565b33604051806020016040528060008152506200006a816200014b60201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000e05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000d7919062001244565b60405180910390fd5b620000f1816200016060201b60201c565b50600160068190555082600881905550816009819055506200013133600160ff166103e8604051806020016040528060008152506200022660201b60201c565b6200014281620002d260201b60201c565b50505062001c00565b80600290816200015c9190620014a2565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036200029b5760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040162000292919062001244565b60405180910390fd5b600080620002b08585620004a260201b60201c565b91509150620002ca600087848487620004d260201b60201c565b505050505050565b6000620002e66000620005ab60201b60201c565b90506200030c3382600160405180602001604052806000815250620005d560201b60201c565b816016600083815260200190815260200160002090816200032e9190620014a2565b506001601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506001601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550336013600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081604051620004529190620015cb565b6040518091039020813373ffffffffffffffffffffffffffffffffffffffff167f7f12dfaa89897e8576e1df3d22fd9d33745a418b2882ad551860bbc4111599ec60405160405180910390a45050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b620004e685858585620005ef60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614620005a45760006200052d6200060960201b60201c565b905060018451036200058b576000620005516000866200061160201b90919060201c565b905060006200056b6000866200061160201b90919060201c565b9050620005838389898585896200062560201b60201c565b5050620005a2565b620005a1818787878787620007e860201b60201c565b5b505b5050505050565b6000620005be82620009ab60201b60201c565b9050620005d0620009f760201b60201c565b919050565b620005e9848484846200022660201b60201c565b50505050565b620006038484848462000a0960201b60201c565b50505050565b600033905090565b600060208202602084010151905092915050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115620007e0578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016200068995949392919062001652565b6020604051808303816000875af1925050508015620006c857506040513d601f19601f82011682018060405250810190620006c5919062001713565b60015b62000752573d8060008114620006fb576040519150601f19603f3d011682016040523d82523d6000602084013e62000700565b606091505b5060008151036200074a57846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040162000741919062001244565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614620007de57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401620007d5919062001244565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115620009a3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016200084c95949392919062001813565b6020604051808303816000875af19250505080156200088b57506040513d601f19601f8201168201806040525081019062000888919062001713565b60015b62000915573d8060008114620008be576040519150601f19603f3d011682016040523d82523d6000602084013e620008c3565b606091505b5060008151036200090d57846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040162000904919062001244565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614620009a157846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040162000998919062001244565b60405180910390fd5b505b505050505050565b600033600143620009bd9190620018b4565b4083600754604051602001620009d7949392919062001a3e565b6040516020818303038152906040528051906020012060001c9050919050565b60076000815460010191905081905550565b62000a1d8484848462000be460201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160362000b0e576000805b835181101562000af057600083828151811062000a785762000a7762001a94565b5b60200260200101519050806004600087858151811062000a9d5762000a9c62001a94565b5b60200260200101518152602001908152602001600020600082825462000ac4919062001ac3565b92505081905550808362000ad9919062001ac3565b9250508062000ae89062001afe565b905062000a56565b50806005600082825462000b05919062001ac3565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000bde576000805b835181101562000bcb57600083828151811062000b695762000b6862001a94565b5b60200260200101519050806004600087858151811062000b8e5762000b8d62001a94565b5b60200260200101518152602001908152602001600020600082825403925050819055508083019250508062000bc39062001afe565b905062000b47565b5080600560008282540392505081905550505b50505050565b805182511462000c3157815181516040517f5b05999100000000000000000000000000000000000000000000000000000000815260040162000c2892919062001b4b565b60405180910390fd5b600062000c436200060960201b60201c565b905060005b835181101562000e6757600062000c6982866200061160201b90919060201c565b9050600062000c8283866200061160201b90919060201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161462000db357600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000d5b57888183856040517f03dee4c500000000000000000000000000000000000000000000000000000000815260040162000d52949392919062001b78565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161462000e51578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000e49919062001ac3565b925050819055505b50508062000e5f9062001afe565b905062000c48565b50600183510362000f2e57600062000e8a6000856200061160201b90919060201c565b9050600062000ea46000856200061160201b90919060201c565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405162000f1e92919062001b4b565b60405180910390a4505062000faf565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405162000fa692919062001bc5565b60405180910390a45b5050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000fdf8162000fca565b811462000feb57600080fd5b50565b60008151905062000fff8162000fd4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200105a826200100f565b810181811067ffffffffffffffff821117156200107c576200107b62001020565b5b80604052505050565b60006200109162000fb6565b90506200109f82826200104f565b919050565b600067ffffffffffffffff821115620010c257620010c162001020565b5b620010cd826200100f565b9050602081019050919050565b60005b83811015620010fa578082015181840152602081019050620010dd565b60008484015250505050565b60006200111d6200111784620010a4565b62001085565b9050828152602081018484840111156200113c576200113b6200100a565b5b62001149848285620010da565b509392505050565b600082601f83011262001169576200116862001005565b5b81516200117b84826020860162001106565b91505092915050565b600080600060608486031215620011a0576200119f62000fc0565b5b6000620011b08682870162000fee565b9350506020620011c38682870162000fee565b925050604084015167ffffffffffffffff811115620011e757620011e662000fc5565b5b620011f58682870162001151565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200122c82620011ff565b9050919050565b6200123e816200121f565b82525050565b60006020820190506200125b600083018462001233565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620012b457607f821691505b602082108103620012ca57620012c96200126c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620013347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620012f5565b620013408683620012f5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620013836200137d620013778462000fca565b62001358565b62000fca565b9050919050565b6000819050919050565b6200139f8362001362565b620013b7620013ae826200138a565b84845462001302565b825550505050565b600090565b620013ce620013bf565b620013db81848462001394565b505050565b5b818110156200140357620013f7600082620013c4565b600181019050620013e1565b5050565b601f82111562001452576200141c81620012d0565b6200142784620012e5565b8101602085101562001437578190505b6200144f6200144685620012e5565b830182620013e0565b50505b505050565b600082821c905092915050565b6000620014776000198460080262001457565b1980831691505092915050565b600062001492838362001464565b9150826002028217905092915050565b620014ad8262001261565b67ffffffffffffffff811115620014c957620014c862001020565b5b620014d582546200129b565b620014e282828562001407565b600060209050601f8311600181146200151a576000841562001505578287015190505b62001511858262001484565b86555062001581565b601f1984166200152a86620012d0565b60005b8281101562001554578489015182556001820191506020850194506020810190506200152d565b8683101562001574578489015162001570601f89168262001464565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000620015a18262001261565b620015ad818562001589565b9350620015bf818560208601620010da565b80840191505092915050565b6000620015d9828462001594565b915081905092915050565b620015ef8162000fca565b82525050565b600081519050919050565b600082825260208201905092915050565b60006200161e82620015f5565b6200162a818562001600565b93506200163c818560208601620010da565b62001647816200100f565b840191505092915050565b600060a08201905062001669600083018862001233565b62001678602083018762001233565b620016876040830186620015e4565b620016966060830185620015e4565b8181036080830152620016aa818462001611565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b620016ed81620016b6565b8114620016f957600080fd5b50565b6000815190506200170d81620016e2565b92915050565b6000602082840312156200172c576200172b62000fc0565b5b60006200173c84828501620016fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200177c8162000fca565b82525050565b600062001790838362001771565b60208301905092915050565b6000602082019050919050565b6000620017b68262001745565b620017c2818562001750565b9350620017cf8362001761565b8060005b8381101562001806578151620017ea888262001782565b9750620017f7836200179c565b925050600181019050620017d3565b5085935050505092915050565b600060a0820190506200182a600083018862001233565b62001839602083018762001233565b81810360408301526200184d8186620017a9565b90508181036060830152620018638185620017a9565b9050818103608083015262001879818462001611565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620018c18262000fca565b9150620018ce8362000fca565b9250828203905081811115620018e957620018e862001885565b5b92915050565b60008160601b9050919050565b60006200190982620018ef565b9050919050565b60006200191d82620018fc565b9050919050565b6200193962001933826200121f565b62001910565b82525050565b6000819050919050565b6000819050919050565b6200196862001962826200193f565b62001949565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110620019b157620019b06200196e565b5b50565b6000819050620019c4826200199d565b919050565b6000620019d682620019b4565b9050919050565b60008160f81b9050919050565b6000620019f782620019dd565b9050919050565b62001a1362001a0d82620019c9565b620019ea565b82525050565b6000819050919050565b62001a3862001a328262000fca565b62001a19565b82525050565b600062001a4c828762001924565b60148201915062001a5e828662001953565b60208201915062001a708285620019fe565b60018201915062001a82828462001a23565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062001ad08262000fca565b915062001add8362000fca565b925082820190508082111562001af85762001af762001885565b5b92915050565b600062001b0b8262000fca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001b405762001b3f62001885565b5b600182019050919050565b600060408201905062001b626000830185620015e4565b62001b716020830184620015e4565b9392505050565b600060808201905062001b8f600083018762001233565b62001b9e6020830186620015e4565b62001bad6040830185620015e4565b62001bbc6060830184620015e4565b95945050505050565b6000604082019050818103600083015262001be18185620017a9565b9050818103602083015262001bf78184620017a9565b90509392505050565b6143fe8062001c106000396000f3fe60806040526004361061019a5760003560e01c8063715018a6116100ec578063c96da2721161008a578063e985e9c511610064578063e985e9c5146105ba578063f242432a146105f7578063f2fde38b14610620578063f5298aca146106495761019a565b8063c96da27214610539578063dce9465f14610564578063e6c0e6d51461058f5761019a565b80638da5cb5b116100c65780638da5cb5b1461047f578063a22cb465146104aa578063bd441810146104d3578063bd85b039146104fc5761019a565b8063715018a61461042357806379b8fd7e1461043a5780638b89b910146104635761019a565b80630e89341c116101595780634e1273f4116101335780634e1273f4146103555780634f558e791461039257806352e9606f146103cf5780636b20c454146103fa5761019a565b80630e89341c146102c457806318160ddd146103015780632eb2c2d61461032c5761019a565b806269ed7d1461019f578062fdd58e146101c857806301ffc9a71461020557806302fe53051461024257806308cdf5751461026b5780630dd689e614610287575b600080fd5b3480156101ab57600080fd5b506101c660048036038101906101c19190612e61565b610672565b005b3480156101d457600080fd5b506101ef60048036038101906101ea9190612eec565b610684565b6040516101fc9190612f3b565b60405180910390f35b34801561021157600080fd5b5061022c60048036038101906102279190612fae565b6106de565b6040516102399190612ff6565b60405180910390f35b34801561024e57600080fd5b5061026960048036038101906102649190613157565b6107c0565b005b61028560048036038101906102809190613225565b6107d4565b005b34801561029357600080fd5b506102ae60048036038101906102a99190613299565b6108d5565b6040516102bb9190612ff6565b60405180910390f35b3480156102d057600080fd5b506102eb60048036038101906102e69190612e61565b6109be565b6040516102f89190613345565b60405180910390f35b34801561030d57600080fd5b50610316610a52565b6040516103239190612f3b565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e91906134cb565b610a5c565b005b34801561036157600080fd5b5061037c6004803603810190610377919061365d565b610b04565b6040516103899190613793565b60405180910390f35b34801561039e57600080fd5b506103b960048036038101906103b49190612e61565b610c13565b6040516103c69190612ff6565b60405180910390f35b3480156103db57600080fd5b506103e4610c27565b6040516103f19190612f3b565b60405180910390f35b34801561040657600080fd5b50610421600480360381019061041c91906137b5565b610c2d565b005b34801561042f57600080fd5b50610438610cd9565b005b34801561044657600080fd5b50610461600480360381019061045c9190612e61565b610ced565b005b61047d60048036038101906104789190612e61565b6110d8565b005b34801561048b57600080fd5b5061049461119f565b6040516104a1919061384f565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc9190613896565b6111c9565b005b3480156104df57600080fd5b506104fa60048036038101906104f591906138d6565b6111df565b005b34801561050857600080fd5b50610523600480360381019061051e9190612e61565b6116e7565b6040516105309190612f3b565b60405180910390f35b34801561054557600080fd5b5061054e611704565b60405161055b9190612f3b565b60405180910390f35b34801561057057600080fd5b5061057961170a565b6040516105869190612f3b565b60405180910390f35b34801561059b57600080fd5b506105a4611710565b6040516105b19190612f3b565b60405180910390f35b3480156105c657600080fd5b506105e160048036038101906105dc9190613916565b611716565b6040516105ee9190612ff6565b60405180910390f35b34801561060357600080fd5b5061061e60048036038101906106199190613956565b6117aa565b005b34801561062c57600080fd5b5061064760048036038101906106429190613299565b611852565b005b34801561065557600080fd5b50610670600480360381019061066b91906139ed565b6118d8565b005b61067a611984565b80600b8190555050565b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107a957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107b957506107b882611a0b565b5b9050919050565b6107c8611984565b6107d181611a75565b50565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16610868576040517fd2534e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610871336108d5565b6108865761088184848484611a88565b6108cf565b6008543410156108c2576040517f3ca5585700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108ce84848484611a88565b5b50505050565b600080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000810361092c5760009150506109b9565b600080600061093a84611c30565b925092509250600080600061094e42611c30565b92509250925082861415806109635750818514155b8061096e5750808414155b156109835760009750505050505050506109b9565b828614801561099157508185145b801561099c57508084145b156109b15760019750505050505050506109b9565b505050505050505b919050565b6060600280546109cd90613a6f565b80601f01602080910402602001604051908101604052809291908181526020018280546109f990613a6f565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b50505050509050919050565b6000600554905090565b6000610a66611d43565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015610aab5750610aa98682611716565b155b15610aef5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610ae6929190613aa0565b60405180910390fd5b610afc8686868686611d4b565b505050505050565b60608151835114610b5057815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610b47929190613ac9565b60405180910390fd5b6000835167ffffffffffffffff811115610b6d57610b6c61302c565b5b604051908082528060200260200182016040528015610b9b5781602001602082028036833780820191505090505b50905060005b8451811015610c0857610bd8610bc08287611e4390919063ffffffff16565b610bd38387611e5790919063ffffffff16565b610684565b828281518110610beb57610bea613af2565b5b60200260200101818152505080610c0190613b50565b9050610ba1565b508091505092915050565b600080610c1f836116e7565b119050919050565b600b5481565b610c35611d43565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610c7e5750610c7c83610c77611d43565b611716565b155b15610cc957610c8b611d43565b836040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610cc0929190613aa0565b60405180910390fd5b610cd4838383611e6b565b505050565b610ce1611984565b610ceb6000611eff565b565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16610d81576040517fdf8ddd4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da23033600160ff16600160405180602001604052806000815250611fc5565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600e60008481526020019081526020016000206001600e600086815260200190815260200160002080549050610e989190613b98565b81548110610ea957610ea8613af2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600e60008581526020019081526020016000208381548110610efc57610efb613af2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600f600085815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e6000848152602001908152602001600020805480610fbc57610fbb613bcc565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600f600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055826013600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa357ddac6953b1489aacc22ecb8d0e074b7eb0c47fb0793fc1454bd2120e767b60405160405180910390a4505050565b6110e06120d0565b6000606482600b546110f29190613bfb565b6110fc9190613c6c565b9050600a606461110c9190613bfb565b821061113a576064600c54826111229190613bfb565b61112c9190613c6c565b816111379190613b98565b90505b80341015611174576040517f3ca5585700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61119333600160ff168460405180602001604052806000815250612116565b5061119c6121af565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111db6111d4611d43565b83836121b9565b5050565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16611273576040517fd2534e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615150361136a576040517fa719f77d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166013600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611403576040517f55e86fa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600161141333600160ff16610684565b101561144b576040517f4d3e3f8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16156114e0576040517f58220dc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115013330600160ff16600160405180602001604052806000815250611fc5565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600e6000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e6000838152602001908152602001600020805490506116019190613b98565b600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806013600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e1f5f35efc2093b6237337853093859ce374de81f708e6f27c9f54661906c9f60405160405180910390a45050565b600060046000838152602001908152602001600020549050919050565b60085481565b60095481565b600c5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006117b4611d43565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156117f957506117f78682611716565b155b1561183d5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611834929190613aa0565b60405180910390fd5b61184a8686868686611fc5565b505050505050565b61185a611984565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118cc5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016118c3919061384f565b60405180910390fd5b6118d581611eff565b50565b6118e0611d43565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611929575061192783611922611d43565b611716565b155b1561197457611936611d43565b836040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161196b929190613aa0565b60405180910390fd5b61197f838383612329565b505050565b61198c611d43565b73ffffffffffffffffffffffffffffffffffffffff166119aa61119f565b73ffffffffffffffffffffffffffffffffffffffff1614611a09576119cd611d43565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a00919061384f565b60405180910390fd5b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8060029081611a849190613e49565b5050565b6000611a9460026123d0565b9050611ab233826001604051806020016040528060008152506123ea565b816011600083815260200190815260200160002060006101000a81548160ff02191690836001811115611ae857611ae7613f1b565b5b0217905550336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160156000878152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508383601660008481526020019081526020016000209182611b9e929190613f55565b508383604051611baf929190614055565b604051809103902081867fd4a0af00cef1637741c0df83ac0affe61b90222b342a2e3cd1e4d41beda9a0e460405160405180910390a442600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b600080600080620151808581611c4957611c48613c3d565b5b04905060006226496582019050600062023ab18260040281611c6e57611c6d613c3d565b5b059050600460038262023ab1020181611c8a57611c89613c3d565b5b0582039150600062164b0960018401610fa00281611cab57611caa613c3d565b5b059050601f6004826105b50281611cc557611cc4613c3d565b5b058403019250600061098f8460500281611ce257611ce1613c3d565b5b059050600060508261098f0281611cfc57611cfb613c3d565b5b0585039050600b8281611d1257611d11613c3d565b5b05945084600c0260028301039150848360318603606402010192508296508197508098505050505050509193909250565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611dbd5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611db4919061384f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611e2f5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611e26919061384f565b60405180910390fd5b611e3c85858585856123fc565b5050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611edd5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611ed4919061384f565b60405180910390fd5b611efa8360008484604051806020016040528060008152506123fc565b505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120375760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161202e919061384f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120a95760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016120a0919061384f565b60405180910390fd5b6000806120b685856124ae565b915091506120c787878484876123fc565b50505050505050565b60026006540361210c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036121885760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161217f919061384f565b60405180910390fd5b60008061219585856124ae565b915091506121a76000878484876123fc565b505050505050565b6001600681905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361222b5760006040517fced3e100000000000000000000000000000000000000000000000000000000008152600401612222919061384f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161231c9190612ff6565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361239b5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401612392919061384f565b60405180910390fd5b6000806123a884846124ae565b915091506123c98560008484604051806020016040528060008152506123fc565b5050505050565b60006123db826124de565b90506123e5612526565b919050565b6123f684848484612116565b50505050565b61240885858585612538565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146124a7576000612446611d43565b90506001845103612496576000612467600086611e5790919063ffffffff16565b9050600061247f600086611e5790919063ffffffff16565b905061248f83898985858961254a565b50506124a5565b6124a48187878787876126fe565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b6000336001436124ee9190613b98565b40836007546040516020016125069493929190614171565b6040516020818303038152906040528051906020012060001c9050919050565b60076000815460010191905081905550565b612544848484846128b2565b50505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156126f6578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016125ab959493929190614214565b6020604051808303816000875af19250505080156125e757506040513d601f19601f820116820180604052508101906125e49190614283565b60015b61266b573d8060008114612617576040519150601f19603f3d011682016040523d82523d6000602084013e61261c565b606091505b50600081510361266357846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161265a919061384f565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146126f457846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016126eb919061384f565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156128aa578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161275f9594939291906142b0565b6020604051808303816000875af192505050801561279b57506040513d601f19601f820116820180604052508101906127989190614283565b60015b61281f573d80600081146127cb576040519150601f19603f3d011682016040523d82523d6000602084013e6127d0565b606091505b50600081510361281757846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161280e919061384f565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146128a857846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161289f919061384f565b60405180910390fd5b505b505050505050565b6128be84848484612a69565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361299e576000805b835181101561298257600083828151811061291457612913613af2565b5b60200260200101519050806004600087858151811061293657612935613af2565b5b60200260200101518152602001908152602001600020600082825461295b9190614318565b92505081905550808361296e9190614318565b9250508061297b90613b50565b90506128f6565b5080600560008282546129959190614318565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a63576000805b8351811015612a505760008382815181106129f4576129f3613af2565b5b602002602001015190508060046000878581518110612a1657612a15613af2565b5b602002602001015181526020019081526020016000206000828254039250508190555080830192505080612a4990613b50565b90506129d6565b5080600560008282540392505081905550505b50505050565b8051825114612ab357815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612aaa929190613ac9565b60405180910390fd5b6000612abd611d43565b905060005b8351811015612cd2576000612ae08286611e5790919063ffffffff16565b90506000612af78386611e5790919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612c2457600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612bcc57888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401612bc3949392919061434c565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612cbf578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cb79190614318565b925050819055505b505080612ccb90613b50565b9050612ac2565b506001835103612d91576000612cf2600085611e5790919063ffffffff16565b90506000612d0a600085611e5790919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612d82929190613ac9565b60405180910390a45050612e10565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612e07929190614391565b60405180910390a45b5050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e3e81612e2b565b8114612e4957600080fd5b50565b600081359050612e5b81612e35565b92915050565b600060208284031215612e7757612e76612e21565b5b6000612e8584828501612e4c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612eb982612e8e565b9050919050565b612ec981612eae565b8114612ed457600080fd5b50565b600081359050612ee681612ec0565b92915050565b60008060408385031215612f0357612f02612e21565b5b6000612f1185828601612ed7565b9250506020612f2285828601612e4c565b9150509250929050565b612f3581612e2b565b82525050565b6000602082019050612f506000830184612f2c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f8b81612f56565b8114612f9657600080fd5b50565b600081359050612fa881612f82565b92915050565b600060208284031215612fc457612fc3612e21565b5b6000612fd284828501612f99565b91505092915050565b60008115159050919050565b612ff081612fdb565b82525050565b600060208201905061300b6000830184612fe7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130648261301b565b810181811067ffffffffffffffff821117156130835761308261302c565b5b80604052505050565b6000613096612e17565b90506130a2828261305b565b919050565b600067ffffffffffffffff8211156130c2576130c161302c565b5b6130cb8261301b565b9050602081019050919050565b82818337600083830152505050565b60006130fa6130f5846130a7565b61308c565b90508281526020810184848401111561311657613115613016565b5b6131218482856130d8565b509392505050565b600082601f83011261313e5761313d613011565b5b813561314e8482602086016130e7565b91505092915050565b60006020828403121561316d5761316c612e21565b5b600082013567ffffffffffffffff81111561318b5761318a612e26565b5b61319784828501613129565b91505092915050565b600080fd5b600080fd5b60008083601f8401126131c0576131bf613011565b5b8235905067ffffffffffffffff8111156131dd576131dc6131a0565b5b6020830191508360018202830111156131f9576131f86131a5565b5b9250929050565b6002811061320d57600080fd5b50565b60008135905061321f81613200565b92915050565b6000806000806060858703121561323f5761323e612e21565b5b600061324d87828801612e4c565b945050602085013567ffffffffffffffff81111561326e5761326d612e26565b5b61327a878288016131aa565b9350935050604061328d87828801613210565b91505092959194509250565b6000602082840312156132af576132ae612e21565b5b60006132bd84828501612ed7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156133005780820151818401526020810190506132e5565b60008484015250505050565b6000613317826132c6565b61332181856132d1565b93506133318185602086016132e2565b61333a8161301b565b840191505092915050565b6000602082019050818103600083015261335f818461330c565b905092915050565b600067ffffffffffffffff8211156133825761338161302c565b5b602082029050602081019050919050565b60006133a66133a184613367565b61308c565b905080838252602082019050602084028301858111156133c9576133c86131a5565b5b835b818110156133f257806133de8882612e4c565b8452602084019350506020810190506133cb565b5050509392505050565b600082601f83011261341157613410613011565b5b8135613421848260208601613393565b91505092915050565b600067ffffffffffffffff8211156134455761344461302c565b5b61344e8261301b565b9050602081019050919050565b600061346e6134698461342a565b61308c565b90508281526020810184848401111561348a57613489613016565b5b6134958482856130d8565b509392505050565b600082601f8301126134b2576134b1613011565b5b81356134c284826020860161345b565b91505092915050565b600080600080600060a086880312156134e7576134e6612e21565b5b60006134f588828901612ed7565b955050602061350688828901612ed7565b945050604086013567ffffffffffffffff81111561352757613526612e26565b5b613533888289016133fc565b935050606086013567ffffffffffffffff81111561355457613553612e26565b5b613560888289016133fc565b925050608086013567ffffffffffffffff81111561358157613580612e26565b5b61358d8882890161349d565b9150509295509295909350565b600067ffffffffffffffff8211156135b5576135b461302c565b5b602082029050602081019050919050565b60006135d96135d48461359a565b61308c565b905080838252602082019050602084028301858111156135fc576135fb6131a5565b5b835b8181101561362557806136118882612ed7565b8452602084019350506020810190506135fe565b5050509392505050565b600082601f83011261364457613643613011565b5b81356136548482602086016135c6565b91505092915050565b6000806040838503121561367457613673612e21565b5b600083013567ffffffffffffffff81111561369257613691612e26565b5b61369e8582860161362f565b925050602083013567ffffffffffffffff8111156136bf576136be612e26565b5b6136cb858286016133fc565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61370a81612e2b565b82525050565b600061371c8383613701565b60208301905092915050565b6000602082019050919050565b6000613740826136d5565b61374a81856136e0565b9350613755836136f1565b8060005b8381101561378657815161376d8882613710565b975061377883613728565b925050600181019050613759565b5085935050505092915050565b600060208201905081810360008301526137ad8184613735565b905092915050565b6000806000606084860312156137ce576137cd612e21565b5b60006137dc86828701612ed7565b935050602084013567ffffffffffffffff8111156137fd576137fc612e26565b5b613809868287016133fc565b925050604084013567ffffffffffffffff81111561382a57613829612e26565b5b613836868287016133fc565b9150509250925092565b61384981612eae565b82525050565b60006020820190506138646000830184613840565b92915050565b61387381612fdb565b811461387e57600080fd5b50565b6000813590506138908161386a565b92915050565b600080604083850312156138ad576138ac612e21565b5b60006138bb85828601612ed7565b92505060206138cc85828601613881565b9150509250929050565b600080604083850312156138ed576138ec612e21565b5b60006138fb85828601612e4c565b925050602061390c85828601612e4c565b9150509250929050565b6000806040838503121561392d5761392c612e21565b5b600061393b85828601612ed7565b925050602061394c85828601612ed7565b9150509250929050565b600080600080600060a0868803121561397257613971612e21565b5b600061398088828901612ed7565b955050602061399188828901612ed7565b94505060406139a288828901612e4c565b93505060606139b388828901612e4c565b925050608086013567ffffffffffffffff8111156139d4576139d3612e26565b5b6139e08882890161349d565b9150509295509295909350565b600080600060608486031215613a0657613a05612e21565b5b6000613a1486828701612ed7565b9350506020613a2586828701612e4c565b9250506040613a3686828701612e4c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a8757607f821691505b602082108103613a9a57613a99613a40565b5b50919050565b6000604082019050613ab56000830185613840565b613ac26020830184613840565b9392505050565b6000604082019050613ade6000830185612f2c565b613aeb6020830184612f2c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b5b82612e2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b8d57613b8c613b21565b5b600182019050919050565b6000613ba382612e2b565b9150613bae83612e2b565b9250828203905081811115613bc657613bc5613b21565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613c0682612e2b565b9150613c1183612e2b565b9250828202613c1f81612e2b565b91508282048414831517613c3657613c35613b21565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c7782612e2b565b9150613c8283612e2b565b925082613c9257613c91613c3d565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613cff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613cc2565b613d098683613cc2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613d46613d41613d3c84612e2b565b613d21565b612e2b565b9050919050565b6000819050919050565b613d6083613d2b565b613d74613d6c82613d4d565b848454613ccf565b825550505050565b600090565b613d89613d7c565b613d94818484613d57565b505050565b5b81811015613db857613dad600082613d81565b600181019050613d9a565b5050565b601f821115613dfd57613dce81613c9d565b613dd784613cb2565b81016020851015613de6578190505b613dfa613df285613cb2565b830182613d99565b50505b505050565b600082821c905092915050565b6000613e2060001984600802613e02565b1980831691505092915050565b6000613e398383613e0f565b9150826002028217905092915050565b613e52826132c6565b67ffffffffffffffff811115613e6b57613e6a61302c565b5b613e758254613a6f565b613e80828285613dbc565b600060209050601f831160018114613eb35760008415613ea1578287015190505b613eab8582613e2d565b865550613f13565b601f198416613ec186613c9d565b60005b82811015613ee957848901518255600182019150602085019450602081019050613ec4565b86831015613f065784890151613f02601f891682613e0f565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082905092915050565b613f5f8383613f4a565b67ffffffffffffffff811115613f7857613f7761302c565b5b613f828254613a6f565b613f8d828285613dbc565b6000601f831160018114613fbc5760008415613faa578287013590505b613fb48582613e2d565b86555061401c565b601f198416613fca86613c9d565b60005b82811015613ff257848901358255600182019150602085019450602081019050613fcd565b8683101561400f578489013561400b601f891682613e0f565b8355505b6001600288020188555050505b50505050505050565b600081905092915050565b600061403c8385614025565b93506140498385846130d8565b82840190509392505050565b6000614062828486614030565b91508190509392505050565b60008160601b9050919050565b60006140868261406e565b9050919050565b60006140988261407b565b9050919050565b6140b06140ab82612eae565b61408d565b82525050565b6000819050919050565b6000819050919050565b6140db6140d6826140b6565b6140c0565b82525050565b600381106140f2576140f1613f1b565b5b50565b6000819050614103826140e1565b919050565b6000614113826140f5565b9050919050565b60008160f81b9050919050565b60006141328261411a565b9050919050565b61414a61414582614108565b614127565b82525050565b6000819050919050565b61416b61416682612e2b565b614150565b82525050565b600061417d828761409f565b60148201915061418d82866140ca565b60208201915061419d8285614139565b6001820191506141ad828461415a565b60208201915081905095945050505050565b600081519050919050565b600082825260208201905092915050565b60006141e6826141bf565b6141f081856141ca565b93506142008185602086016132e2565b6142098161301b565b840191505092915050565b600060a0820190506142296000830188613840565b6142366020830187613840565b6142436040830186612f2c565b6142506060830185612f2c565b818103608083015261426281846141db565b90509695505050505050565b60008151905061427d81612f82565b92915050565b60006020828403121561429957614298612e21565b5b60006142a78482850161426e565b91505092915050565b600060a0820190506142c56000830188613840565b6142d26020830187613840565b81810360408301526142e48186613735565b905081810360608301526142f88185613735565b9050818103608083015261430c81846141db565b90509695505050505050565b600061432382612e2b565b915061432e83612e2b565b925082820190508082111561434657614345613b21565b5b92915050565b60006080820190506143616000830187613840565b61436e6020830186612f2c565b61437b6040830185612f2c565b6143886060830184612f2c565b95945050505050565b600060408201905081810360008301526143ab8185613735565b905081810360208301526143bf8184613735565b9050939250505056fea26469706673582212208b89d2393b89d58cdddb127ae68b2a235b0e897993e73956ab5ca0aa00d2da4764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c8063715018a6116100ec578063c96da2721161008a578063e985e9c511610064578063e985e9c5146105ba578063f242432a146105f7578063f2fde38b14610620578063f5298aca146106495761019a565b8063c96da27214610539578063dce9465f14610564578063e6c0e6d51461058f5761019a565b80638da5cb5b116100c65780638da5cb5b1461047f578063a22cb465146104aa578063bd441810146104d3578063bd85b039146104fc5761019a565b8063715018a61461042357806379b8fd7e1461043a5780638b89b910146104635761019a565b80630e89341c116101595780634e1273f4116101335780634e1273f4146103555780634f558e791461039257806352e9606f146103cf5780636b20c454146103fa5761019a565b80630e89341c146102c457806318160ddd146103015780632eb2c2d61461032c5761019a565b806269ed7d1461019f578062fdd58e146101c857806301ffc9a71461020557806302fe53051461024257806308cdf5751461026b5780630dd689e614610287575b600080fd5b3480156101ab57600080fd5b506101c660048036038101906101c19190612e61565b610672565b005b3480156101d457600080fd5b506101ef60048036038101906101ea9190612eec565b610684565b6040516101fc9190612f3b565b60405180910390f35b34801561021157600080fd5b5061022c60048036038101906102279190612fae565b6106de565b6040516102399190612ff6565b60405180910390f35b34801561024e57600080fd5b5061026960048036038101906102649190613157565b6107c0565b005b61028560048036038101906102809190613225565b6107d4565b005b34801561029357600080fd5b506102ae60048036038101906102a99190613299565b6108d5565b6040516102bb9190612ff6565b60405180910390f35b3480156102d057600080fd5b506102eb60048036038101906102e69190612e61565b6109be565b6040516102f89190613345565b60405180910390f35b34801561030d57600080fd5b50610316610a52565b6040516103239190612f3b565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e91906134cb565b610a5c565b005b34801561036157600080fd5b5061037c6004803603810190610377919061365d565b610b04565b6040516103899190613793565b60405180910390f35b34801561039e57600080fd5b506103b960048036038101906103b49190612e61565b610c13565b6040516103c69190612ff6565b60405180910390f35b3480156103db57600080fd5b506103e4610c27565b6040516103f19190612f3b565b60405180910390f35b34801561040657600080fd5b50610421600480360381019061041c91906137b5565b610c2d565b005b34801561042f57600080fd5b50610438610cd9565b005b34801561044657600080fd5b50610461600480360381019061045c9190612e61565b610ced565b005b61047d60048036038101906104789190612e61565b6110d8565b005b34801561048b57600080fd5b5061049461119f565b6040516104a1919061384f565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc9190613896565b6111c9565b005b3480156104df57600080fd5b506104fa60048036038101906104f591906138d6565b6111df565b005b34801561050857600080fd5b50610523600480360381019061051e9190612e61565b6116e7565b6040516105309190612f3b565b60405180910390f35b34801561054557600080fd5b5061054e611704565b60405161055b9190612f3b565b60405180910390f35b34801561057057600080fd5b5061057961170a565b6040516105869190612f3b565b60405180910390f35b34801561059b57600080fd5b506105a4611710565b6040516105b19190612f3b565b60405180910390f35b3480156105c657600080fd5b506105e160048036038101906105dc9190613916565b611716565b6040516105ee9190612ff6565b60405180910390f35b34801561060357600080fd5b5061061e60048036038101906106199190613956565b6117aa565b005b34801561062c57600080fd5b5061064760048036038101906106429190613299565b611852565b005b34801561065557600080fd5b50610670600480360381019061066b91906139ed565b6118d8565b005b61067a611984565b80600b8190555050565b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107a957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107b957506107b882611a0b565b5b9050919050565b6107c8611984565b6107d181611a75565b50565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16610868576040517fd2534e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610871336108d5565b6108865761088184848484611a88565b6108cf565b6008543410156108c2576040517f3ca5585700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108ce84848484611a88565b5b50505050565b600080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000810361092c5760009150506109b9565b600080600061093a84611c30565b925092509250600080600061094e42611c30565b92509250925082861415806109635750818514155b8061096e5750808414155b156109835760009750505050505050506109b9565b828614801561099157508185145b801561099c57508084145b156109b15760019750505050505050506109b9565b505050505050505b919050565b6060600280546109cd90613a6f565b80601f01602080910402602001604051908101604052809291908181526020018280546109f990613a6f565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b50505050509050919050565b6000600554905090565b6000610a66611d43565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015610aab5750610aa98682611716565b155b15610aef5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610ae6929190613aa0565b60405180910390fd5b610afc8686868686611d4b565b505050505050565b60608151835114610b5057815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610b47929190613ac9565b60405180910390fd5b6000835167ffffffffffffffff811115610b6d57610b6c61302c565b5b604051908082528060200260200182016040528015610b9b5781602001602082028036833780820191505090505b50905060005b8451811015610c0857610bd8610bc08287611e4390919063ffffffff16565b610bd38387611e5790919063ffffffff16565b610684565b828281518110610beb57610bea613af2565b5b60200260200101818152505080610c0190613b50565b9050610ba1565b508091505092915050565b600080610c1f836116e7565b119050919050565b600b5481565b610c35611d43565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610c7e5750610c7c83610c77611d43565b611716565b155b15610cc957610c8b611d43565b836040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610cc0929190613aa0565b60405180910390fd5b610cd4838383611e6b565b505050565b610ce1611984565b610ceb6000611eff565b565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16610d81576040517fdf8ddd4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da23033600160ff16600160405180602001604052806000815250611fc5565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600e60008481526020019081526020016000206001600e600086815260200190815260200160002080549050610e989190613b98565b81548110610ea957610ea8613af2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600e60008581526020019081526020016000208381548110610efc57610efb613af2565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600f600085815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e6000848152602001908152602001600020805480610fbc57610fbb613bcc565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600f600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055826013600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa357ddac6953b1489aacc22ecb8d0e074b7eb0c47fb0793fc1454bd2120e767b60405160405180910390a4505050565b6110e06120d0565b6000606482600b546110f29190613bfb565b6110fc9190613c6c565b9050600a606461110c9190613bfb565b821061113a576064600c54826111229190613bfb565b61112c9190613c6c565b816111379190613b98565b90505b80341015611174576040517f3ca5585700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61119333600160ff168460405180602001604052806000815250612116565b5061119c6121af565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111db6111d4611d43565b83836121b9565b5050565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16611273576040517fd2534e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615150361136a576040517fa719f77d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166013600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611403576040517f55e86fa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600161141333600160ff16610684565b101561144b576040517f4d3e3f8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16156114e0576040517f58220dc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115013330600160ff16600160405180602001604052806000815250611fc5565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600e6000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e6000838152602001908152602001600020805490506116019190613b98565b600f600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806013600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e1f5f35efc2093b6237337853093859ce374de81f708e6f27c9f54661906c9f60405160405180910390a45050565b600060046000838152602001908152602001600020549050919050565b60085481565b60095481565b600c5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006117b4611d43565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156117f957506117f78682611716565b155b1561183d5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611834929190613aa0565b60405180910390fd5b61184a8686868686611fc5565b505050505050565b61185a611984565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118cc5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016118c3919061384f565b60405180910390fd5b6118d581611eff565b50565b6118e0611d43565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611929575061192783611922611d43565b611716565b155b1561197457611936611d43565b836040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161196b929190613aa0565b60405180910390fd5b61197f838383612329565b505050565b61198c611d43565b73ffffffffffffffffffffffffffffffffffffffff166119aa61119f565b73ffffffffffffffffffffffffffffffffffffffff1614611a09576119cd611d43565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a00919061384f565b60405180910390fd5b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8060029081611a849190613e49565b5050565b6000611a9460026123d0565b9050611ab233826001604051806020016040528060008152506123ea565b816011600083815260200190815260200160002060006101000a81548160ff02191690836001811115611ae857611ae7613f1b565b5b0217905550336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160156000878152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508383601660008481526020019081526020016000209182611b9e929190613f55565b508383604051611baf929190614055565b604051809103902081867fd4a0af00cef1637741c0df83ac0affe61b90222b342a2e3cd1e4d41beda9a0e460405160405180910390a442600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b600080600080620151808581611c4957611c48613c3d565b5b04905060006226496582019050600062023ab18260040281611c6e57611c6d613c3d565b5b059050600460038262023ab1020181611c8a57611c89613c3d565b5b0582039150600062164b0960018401610fa00281611cab57611caa613c3d565b5b059050601f6004826105b50281611cc557611cc4613c3d565b5b058403019250600061098f8460500281611ce257611ce1613c3d565b5b059050600060508261098f0281611cfc57611cfb613c3d565b5b0585039050600b8281611d1257611d11613c3d565b5b05945084600c0260028301039150848360318603606402010192508296508197508098505050505050509193909250565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611dbd5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611db4919061384f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611e2f5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611e26919061384f565b60405180910390fd5b611e3c85858585856123fc565b5050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611edd5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611ed4919061384f565b60405180910390fd5b611efa8360008484604051806020016040528060008152506123fc565b505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120375760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161202e919061384f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120a95760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016120a0919061384f565b60405180910390fd5b6000806120b685856124ae565b915091506120c787878484876123fc565b50505050505050565b60026006540361210c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036121885760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161217f919061384f565b60405180910390fd5b60008061219585856124ae565b915091506121a76000878484876123fc565b505050505050565b6001600681905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361222b5760006040517fced3e100000000000000000000000000000000000000000000000000000000008152600401612222919061384f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161231c9190612ff6565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361239b5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401612392919061384f565b60405180910390fd5b6000806123a884846124ae565b915091506123c98560008484604051806020016040528060008152506123fc565b5050505050565b60006123db826124de565b90506123e5612526565b919050565b6123f684848484612116565b50505050565b61240885858585612538565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146124a7576000612446611d43565b90506001845103612496576000612467600086611e5790919063ffffffff16565b9050600061247f600086611e5790919063ffffffff16565b905061248f83898985858961254a565b50506124a5565b6124a48187878787876126fe565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b6000336001436124ee9190613b98565b40836007546040516020016125069493929190614171565b6040516020818303038152906040528051906020012060001c9050919050565b60076000815460010191905081905550565b612544848484846128b2565b50505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156126f6578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016125ab959493929190614214565b6020604051808303816000875af19250505080156125e757506040513d601f19601f820116820180604052508101906125e49190614283565b60015b61266b573d8060008114612617576040519150601f19603f3d011682016040523d82523d6000602084013e61261c565b606091505b50600081510361266357846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161265a919061384f565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146126f457846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016126eb919061384f565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156128aa578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161275f9594939291906142b0565b6020604051808303816000875af192505050801561279b57506040513d601f19601f820116820180604052508101906127989190614283565b60015b61281f573d80600081146127cb576040519150601f19603f3d011682016040523d82523d6000602084013e6127d0565b606091505b50600081510361281757846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161280e919061384f565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146128a857846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161289f919061384f565b60405180910390fd5b505b505050505050565b6128be84848484612a69565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361299e576000805b835181101561298257600083828151811061291457612913613af2565b5b60200260200101519050806004600087858151811061293657612935613af2565b5b60200260200101518152602001908152602001600020600082825461295b9190614318565b92505081905550808361296e9190614318565b9250508061297b90613b50565b90506128f6565b5080600560008282546129959190614318565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a63576000805b8351811015612a505760008382815181106129f4576129f3613af2565b5b602002602001015190508060046000878581518110612a1657612a15613af2565b5b602002602001015181526020019081526020016000206000828254039250508190555080830192505080612a4990613b50565b90506129d6565b5080600560008282540392505081905550505b50505050565b8051825114612ab357815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612aaa929190613ac9565b60405180910390fd5b6000612abd611d43565b905060005b8351811015612cd2576000612ae08286611e5790919063ffffffff16565b90506000612af78386611e5790919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612c2457600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612bcc57888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401612bc3949392919061434c565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612cbf578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cb79190614318565b925050819055505b505080612ccb90613b50565b9050612ac2565b506001835103612d91576000612cf2600085611e5790919063ffffffff16565b90506000612d0a600085611e5790919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612d82929190613ac9565b60405180910390a45050612e10565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612e07929190614391565b60405180910390a45b5050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e3e81612e2b565b8114612e4957600080fd5b50565b600081359050612e5b81612e35565b92915050565b600060208284031215612e7757612e76612e21565b5b6000612e8584828501612e4c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612eb982612e8e565b9050919050565b612ec981612eae565b8114612ed457600080fd5b50565b600081359050612ee681612ec0565b92915050565b60008060408385031215612f0357612f02612e21565b5b6000612f1185828601612ed7565b9250506020612f2285828601612e4c565b9150509250929050565b612f3581612e2b565b82525050565b6000602082019050612f506000830184612f2c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f8b81612f56565b8114612f9657600080fd5b50565b600081359050612fa881612f82565b92915050565b600060208284031215612fc457612fc3612e21565b5b6000612fd284828501612f99565b91505092915050565b60008115159050919050565b612ff081612fdb565b82525050565b600060208201905061300b6000830184612fe7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130648261301b565b810181811067ffffffffffffffff821117156130835761308261302c565b5b80604052505050565b6000613096612e17565b90506130a2828261305b565b919050565b600067ffffffffffffffff8211156130c2576130c161302c565b5b6130cb8261301b565b9050602081019050919050565b82818337600083830152505050565b60006130fa6130f5846130a7565b61308c565b90508281526020810184848401111561311657613115613016565b5b6131218482856130d8565b509392505050565b600082601f83011261313e5761313d613011565b5b813561314e8482602086016130e7565b91505092915050565b60006020828403121561316d5761316c612e21565b5b600082013567ffffffffffffffff81111561318b5761318a612e26565b5b61319784828501613129565b91505092915050565b600080fd5b600080fd5b60008083601f8401126131c0576131bf613011565b5b8235905067ffffffffffffffff8111156131dd576131dc6131a0565b5b6020830191508360018202830111156131f9576131f86131a5565b5b9250929050565b6002811061320d57600080fd5b50565b60008135905061321f81613200565b92915050565b6000806000806060858703121561323f5761323e612e21565b5b600061324d87828801612e4c565b945050602085013567ffffffffffffffff81111561326e5761326d612e26565b5b61327a878288016131aa565b9350935050604061328d87828801613210565b91505092959194509250565b6000602082840312156132af576132ae612e21565b5b60006132bd84828501612ed7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156133005780820151818401526020810190506132e5565b60008484015250505050565b6000613317826132c6565b61332181856132d1565b93506133318185602086016132e2565b61333a8161301b565b840191505092915050565b6000602082019050818103600083015261335f818461330c565b905092915050565b600067ffffffffffffffff8211156133825761338161302c565b5b602082029050602081019050919050565b60006133a66133a184613367565b61308c565b905080838252602082019050602084028301858111156133c9576133c86131a5565b5b835b818110156133f257806133de8882612e4c565b8452602084019350506020810190506133cb565b5050509392505050565b600082601f83011261341157613410613011565b5b8135613421848260208601613393565b91505092915050565b600067ffffffffffffffff8211156134455761344461302c565b5b61344e8261301b565b9050602081019050919050565b600061346e6134698461342a565b61308c565b90508281526020810184848401111561348a57613489613016565b5b6134958482856130d8565b509392505050565b600082601f8301126134b2576134b1613011565b5b81356134c284826020860161345b565b91505092915050565b600080600080600060a086880312156134e7576134e6612e21565b5b60006134f588828901612ed7565b955050602061350688828901612ed7565b945050604086013567ffffffffffffffff81111561352757613526612e26565b5b613533888289016133fc565b935050606086013567ffffffffffffffff81111561355457613553612e26565b5b613560888289016133fc565b925050608086013567ffffffffffffffff81111561358157613580612e26565b5b61358d8882890161349d565b9150509295509295909350565b600067ffffffffffffffff8211156135b5576135b461302c565b5b602082029050602081019050919050565b60006135d96135d48461359a565b61308c565b905080838252602082019050602084028301858111156135fc576135fb6131a5565b5b835b8181101561362557806136118882612ed7565b8452602084019350506020810190506135fe565b5050509392505050565b600082601f83011261364457613643613011565b5b81356136548482602086016135c6565b91505092915050565b6000806040838503121561367457613673612e21565b5b600083013567ffffffffffffffff81111561369257613691612e26565b5b61369e8582860161362f565b925050602083013567ffffffffffffffff8111156136bf576136be612e26565b5b6136cb858286016133fc565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61370a81612e2b565b82525050565b600061371c8383613701565b60208301905092915050565b6000602082019050919050565b6000613740826136d5565b61374a81856136e0565b9350613755836136f1565b8060005b8381101561378657815161376d8882613710565b975061377883613728565b925050600181019050613759565b5085935050505092915050565b600060208201905081810360008301526137ad8184613735565b905092915050565b6000806000606084860312156137ce576137cd612e21565b5b60006137dc86828701612ed7565b935050602084013567ffffffffffffffff8111156137fd576137fc612e26565b5b613809868287016133fc565b925050604084013567ffffffffffffffff81111561382a57613829612e26565b5b613836868287016133fc565b9150509250925092565b61384981612eae565b82525050565b60006020820190506138646000830184613840565b92915050565b61387381612fdb565b811461387e57600080fd5b50565b6000813590506138908161386a565b92915050565b600080604083850312156138ad576138ac612e21565b5b60006138bb85828601612ed7565b92505060206138cc85828601613881565b9150509250929050565b600080604083850312156138ed576138ec612e21565b5b60006138fb85828601612e4c565b925050602061390c85828601612e4c565b9150509250929050565b6000806040838503121561392d5761392c612e21565b5b600061393b85828601612ed7565b925050602061394c85828601612ed7565b9150509250929050565b600080600080600060a0868803121561397257613971612e21565b5b600061398088828901612ed7565b955050602061399188828901612ed7565b94505060406139a288828901612e4c565b93505060606139b388828901612e4c565b925050608086013567ffffffffffffffff8111156139d4576139d3612e26565b5b6139e08882890161349d565b9150509295509295909350565b600080600060608486031215613a0657613a05612e21565b5b6000613a1486828701612ed7565b9350506020613a2586828701612e4c565b9250506040613a3686828701612e4c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a8757607f821691505b602082108103613a9a57613a99613a40565b5b50919050565b6000604082019050613ab56000830185613840565b613ac26020830184613840565b9392505050565b6000604082019050613ade6000830185612f2c565b613aeb6020830184612f2c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b5b82612e2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b8d57613b8c613b21565b5b600182019050919050565b6000613ba382612e2b565b9150613bae83612e2b565b9250828203905081811115613bc657613bc5613b21565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613c0682612e2b565b9150613c1183612e2b565b9250828202613c1f81612e2b565b91508282048414831517613c3657613c35613b21565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c7782612e2b565b9150613c8283612e2b565b925082613c9257613c91613c3d565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613cff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613cc2565b613d098683613cc2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613d46613d41613d3c84612e2b565b613d21565b612e2b565b9050919050565b6000819050919050565b613d6083613d2b565b613d74613d6c82613d4d565b848454613ccf565b825550505050565b600090565b613d89613d7c565b613d94818484613d57565b505050565b5b81811015613db857613dad600082613d81565b600181019050613d9a565b5050565b601f821115613dfd57613dce81613c9d565b613dd784613cb2565b81016020851015613de6578190505b613dfa613df285613cb2565b830182613d99565b50505b505050565b600082821c905092915050565b6000613e2060001984600802613e02565b1980831691505092915050565b6000613e398383613e0f565b9150826002028217905092915050565b613e52826132c6565b67ffffffffffffffff811115613e6b57613e6a61302c565b5b613e758254613a6f565b613e80828285613dbc565b600060209050601f831160018114613eb35760008415613ea1578287015190505b613eab8582613e2d565b865550613f13565b601f198416613ec186613c9d565b60005b82811015613ee957848901518255600182019150602085019450602081019050613ec4565b86831015613f065784890151613f02601f891682613e0f565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082905092915050565b613f5f8383613f4a565b67ffffffffffffffff811115613f7857613f7761302c565b5b613f828254613a6f565b613f8d828285613dbc565b6000601f831160018114613fbc5760008415613faa578287013590505b613fb48582613e2d565b86555061401c565b601f198416613fca86613c9d565b60005b82811015613ff257848901358255600182019150602085019450602081019050613fcd565b8683101561400f578489013561400b601f891682613e0f565b8355505b6001600288020188555050505b50505050505050565b600081905092915050565b600061403c8385614025565b93506140498385846130d8565b82840190509392505050565b6000614062828486614030565b91508190509392505050565b60008160601b9050919050565b60006140868261406e565b9050919050565b60006140988261407b565b9050919050565b6140b06140ab82612eae565b61408d565b82525050565b6000819050919050565b6000819050919050565b6140db6140d6826140b6565b6140c0565b82525050565b600381106140f2576140f1613f1b565b5b50565b6000819050614103826140e1565b919050565b6000614113826140f5565b9050919050565b60008160f81b9050919050565b60006141328261411a565b9050919050565b61414a61414582614108565b614127565b82525050565b6000819050919050565b61416b61416682612e2b565b614150565b82525050565b600061417d828761409f565b60148201915061418d82866140ca565b60208201915061419d8285614139565b6001820191506141ad828461415a565b60208201915081905095945050505050565b600081519050919050565b600082825260208201905092915050565b60006141e6826141bf565b6141f081856141ca565b93506142008185602086016132e2565b6142098161301b565b840191505092915050565b600060a0820190506142296000830188613840565b6142366020830187613840565b6142436040830186612f2c565b6142506060830185612f2c565b818103608083015261426281846141db565b90509695505050505050565b60008151905061427d81612f82565b92915050565b60006020828403121561429957614298612e21565b5b60006142a78482850161426e565b91505092915050565b600060a0820190506142c56000830188613840565b6142d26020830187613840565b81810360408301526142e48186613735565b905081810360608301526142f88185613735565b9050818103608083015261430c81846141db565b90509695505050505050565b600061432382612e2b565b915061432e83612e2b565b925082820190508082111561434657614345613b21565b5b92915050565b60006080820190506143616000830187613840565b61436e6020830186612f2c565b61437b6040830185612f2c565b6143886060830184612f2c565b95945050505050565b600060408201905081810360008301526143ab8185613735565b905081810360208301526143bf8184613735565b9050939250505056fea26469706673582212208b89d2393b89d58cdddb127ae68b2a235b0e897993e73956ab5ca0aa00d2da4764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply()": {
        "details": "Total value of tokens."
      },
      "totalSupply(uint256)": {
        "details": "Total value of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 332,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 334,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1591,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1593,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_totalSupplyAll",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1984,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3269,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "nonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3271,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "DiarySavingFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3273,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "DiaryCoverFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3277,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "LastSaveDate",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3283,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "followerTokenPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3289,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "discountRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3295,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "IsFollowing",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3300,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "profileFollowers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3306,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "profileFollowerIndexes",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3310,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "DiaryOwners",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3315,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "DiaryVisibility",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_enum(DiaryVisibility)4230)"
      },
      {
        "astId": 3321,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "ProfileTokens",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3325,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "ProfileOwnedBy",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3329,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "HasProfile",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3335,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "ProfileDiaries",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3339,
        "contract": "contracts/src/Diary.sol:Diary",
        "label": "TokenUri",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(DiaryVisibility)4230": {
        "encoding": "inplace",
        "label": "enum Enums.DiaryVisibility",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(DiaryVisibility)4230)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Enums.DiaryVisibility)",
        "numberOfBytes": "32",
        "value": "t_enum(DiaryVisibility)4230"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}